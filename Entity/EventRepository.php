<?php
/*
 * This file is part of the Sulu CMS.
 *
 * (c) bytepark GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Bundle\EventBundle\Entity;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @package    Sulu\Bundle\EventBundle\Entity
 * @author     bytepark GmbH <code@bytepark.de>
 * @link       http://www.bytepark.de
 */
class EventRepository extends EntityRepository implements EventRepositoryInterface
{
    /**
     * @var int
     */
    const MAXIMUM_RESULTS = 25;

    /**
     * {@inheritDoc}
     */
    public function findByIdAndLocale($eventId, $locale)
    {
        try {
            $queryBuilder = $this->getEventQuery();
            $queryBuilder->andWhere('event.id = :eventId');
            $queryBuilder->setParameter('eventId', $eventId);

            return $queryBuilder->getQuery()->getSingleResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * @param array $filter
     * @return array|null
     */
    public function findEventsForMap($filter)
    {
        try {
            $queryBuilder = $this->createQueryBuilder('event')
                ->select(
                    array(
                        'event.id',
                        'event.title',
                        'event.startDate',
                        'event.startTime',
                        'event.city',
                        'event.zip',
                        'event.country',
                        'event.latitude AS lat',
                        'event.longitude AS lng'
                    )
                );

            $queryBuilder = $this->processFilter($queryBuilder, $filter);

            $queryBuilder->andWhere('event.startDate >= CURRENT_DATE()');

            return $queryBuilder->getQuery()->getResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * @param string $page
     * @param array  $filter
     * @return array|null
     */
    public function findFilteredEvents($page, $filter)
    {
        try {
            $queryBuilder = $this->getEventQuery();
            $queryBuilder = $this->processFilter($queryBuilder, $filter);

            $queryBuilder->andWhere('event.startDate >= CURRENT_DATE()');
            $queryBuilder->setFirstResult(($page - 1) * self::MAXIMUM_RESULTS);
            $queryBuilder->setMaxResults(self::MAXIMUM_RESULTS);

            $paginator = new Paginator($queryBuilder);

            return array('events' => $paginator, 'totalPages' => ceil(count($paginator) / self::MAXIMUM_RESULTS));
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * @return array
     */
    public function findAll()
    {
        $queryBuilder = $this->getEventQuery();

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param int $maxResults
     * @return array
     */
    public function findRunningEvents($maxResults)
    {
        $dql = 'SELECT partial
            e.{id, title, startDate}
        FROM
            Sulu\Bundle\EventBundle\Entity\Event e
        WHERE
            e.startDate >= CURRENT_DATE()
            AND
            e.isTopEvent = 1
        ORDER BY e.startDate ASC';

        $query = $this->getEntityManager()->createQuery($dql);

        if (!is_null($maxResults) && is_int($maxResults)) {
            $query->setMaxResults($maxResults);
        }

        $result = $query->getResult();

        return $result;
    }

    /**
     * @return array
     */
    public function findAvailableCountries()
    {
        $queryBuilder = $this->createQueryBuilder('event')
            ->select(array('event.country'))
            ->distinct();

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Returns the query for events
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getEventQuery()
    {
        $queryBuilder = $this->createQueryBuilder('event');

        return $queryBuilder;
    }

    /**
     * @param \Doctrine\ORM\QueryBuilder $queryBuilder
     * @param $filter
     *
     * @return QueryBuilder
     */
    private function processFilter(QueryBuilder $queryBuilder, $filter)
    {
        if (isset($filter['searchString']) && '' !== $filter['searchString']) {
            $locationExpr = $queryBuilder->expr()->orX();
            foreach (explode(' ', $filter['searchString']) as $keywordIndex => $keyword) {
                $queryParameter = 'searchString' . $keywordIndex;

                $queryBuilder->andWhere('event.title LIKE :' . $queryParameter);
                $queryBuilder->setParameter($queryParameter, '%' . trim($keyword) . '%');

                $locationExpr->add($queryBuilder->expr()->like('event.city', ':' . $queryParameter));
            }

            if (!isset($filter['lat']) && !isset($filter['long'])) {
                $queryBuilder->orWhere($locationExpr);
            }
        }

        if (isset($filter['eventIds'])) {
            $queryBuilder->andWhere('event.id IN (:eventIds)');
            $queryBuilder->setParameter('eventIds', $filter['eventIds']);
        }

        if (isset($filter['isTopEvent'])) {
            $queryBuilder->andWhere('event.isTopEvent = :isTopEvent');
            $queryBuilder->setParameter('isTopEvent', $filter['isTopEvent']);
        }

        if (isset($filter['categories']) && '' !== $filter['categories']) {
            $queryBuilder->leftJoin('event.categories', 'eventCategories');
            $queryBuilder->andWhere('eventCategories.id IN (:categories)');
            $queryBuilder->setParameter('categories', $filter['categories']);
        }

        if (isset($filter['dateFrom']) && '' !== $filter['dateFrom']) {
            /** @var DateTime $dateFrom */
            $dateFrom = $filter['dateFrom'];

            $queryBuilder->andWhere('event.startDate >= :startDate');
            $queryBuilder->setParameter('startDate', $dateFrom->format('Y-m-d'));
        }

        if ((isset($filter['dateFrom']) && '' !== $filter['dateFrom']) && (isset($filter['dateTo']) && '' !== $filter['dateTo'])) {
            /** @var DateTime $dateTo */
            $dateTo = $filter['dateTo'];

            $queryBuilder->andWhere('event.startDate <= :startEnd');
            $queryBuilder->setParameter('startEnd', $dateTo->format('Y-m-d'));
        } elseif (isset($filter['dateTo']) && '' !== $filter['dateTo']) {
            /** @var DateTime $dateTo */
            $dateTo = $filter['dateTo'];

            $queryBuilder->andWhere('event.startDate <= :startEnd');
            $queryBuilder->setParameter('startEnd', $dateTo->format('Y-m-d'));
        }

        if (isset($filter['lat']) && isset($filter['long'])) {
            $queryBuilder->addSelect(
                '( 3959 * acos(cos(radians(:latitude)) ' .
                '* cos(radians(event.latitude)) ' .
                '* cos(radians(event.longitude) ' .
                '- radians(:longitude)) ' .
                '+ sin(radians(:latitude)) ' .
                '* sin(radians(event.latitude)))) AS distance'
            );
            $queryBuilder->setParameter('latitude', $filter['lat']);
            $queryBuilder->setParameter('longitude', $filter['long']);

            $queryBuilder->having('distance <= :area');
            $queryBuilder->setParameter('area', $filter['area']);

            $queryBuilder->orderBy('distance', 'ASC');
        } else {
            $queryBuilder->orderBy('event.startDate', 'ASC');
        }

        if (isset($filter['country'])) {
            $queryBuilder->andWhere('event.country = :country');
            $queryBuilder->setParameter('country', $filter['country']);
        }

        return $queryBuilder;
    }
}
